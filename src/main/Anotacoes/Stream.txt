 Em Java, um "stream" é uma sequência de elementos que podem ser processados ​​em uma pipeline de operações. Ele
 permite que você realize operações em coleções de dados de maneira concisa e funcional, sem a necessidade de escrever
 loops tradicionais.

Um stream pode ser usado para executar várias operações em um conjunto de dados, como filtrar elementos, mapear valores,
reduzir coleções e muito mais. A principal ideia por trás do uso de streams é permitir o processamento de dados de
maneira declarativa, em vez de imperativa.

Aqui está uma explicação básica de como usar streams em Java:

Criação de um stream:

Você pode criar um stream a partir de uma coleção existente usando o método stream() ou parallelStream().
Operações intermediárias:

Operações intermediárias são aquelas que podem ser encadeadas em um stream e modificam ou filtram os elementos, mas não
produzem um resultado final. Alguns exemplos são filter(), map(), sorted() e distinct(). Essas operações são lazy, o
que significa que não são executadas imediatamente.
Operação terminal:

Uma operação terminal é aquela que produz um resultado final ou um valor de retorno. Algumas operações terminais comuns
são collect(), forEach(), reduce() e count(). Quando uma operação terminal é invocada, o processamento do stream é
executado.



Aqui está um exemplo simples de como usar streams para obter a soma dos números pares de uma lista:


import java.util.Arrays;
import java.util.List;

public class StreamExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        int sum = numbers.stream()
                        .filter(n -> n % 2 == 0)
                        .mapToInt(Integer::intValue)
                        .sum();

        System.out.println("Soma dos números pares: " + sum);
    }
}

Neste exemplo, criamos um stream a partir da lista de números. Em seguida, filtramos apenas os números pares usando
filter(), mapeamos os elementos para o tipo int usando mapToInt(), e finalmente calculamos a soma usando sum().
A operação terminal sum() retorna o resultado final.